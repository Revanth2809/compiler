Lexi. l
%{
#include "y.tab.h"
%}
%option noyywrap
%%
[0-9]+ { yylval = atoi(yytext); return NUM; }
[-+*/\(\)] { return yytext[0]; }
\n { return 0; }
[ \t] ; // Ignore spaces and tabs
%%
Parser.y
%{
#include <stdio.h>
%}
%token NUM
%left '+' '-'
%left '*' '/'
%%
Statement: expr {printf("\nOutput : %d",$1);}
expr : expr '+' expr { $$ = $1 + $3; }
| expr '-' expr { $$ = $1 - $3; }
| expr '*' expr { $$ = $1 * $3; }
| expr '/' expr { $$ = $1 / $3; }
| '(' expr ')' { $$ = $2; }
| NUM { $$ = $1; }
%%
int main() {
yyparse();
return 0;
}
char *s; yyerror() {
printf("%s",s);
}
yywrap() {
return 1;
}
